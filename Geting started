Go to google and install git.
check if install or not with: git --version.
set username and mail:see comands from google.

# NOTE: sometimes the saved username and saved credentials are different

# Your Name in Commits (git config user.name):

This is like signing your name on a piece of work. Every time you make a change (commit), Git needs to know what name to attach to that change. This is what the git config user.name is for.
Example: If you configure your name as "Nakul Gupta," Git will say "Nakul Gupta made this change" in the project history. This is what you see when you run the command git config user.name.

# Your Username for Logging Into GitHub:

When you push your code to GitHub (or another remote server), Git needs to know how to log in. The login username is stored in a place like Windows Credential Manager (on Windows). This can is separate from the name used in your commits.
Example: You might log into GitHub with the username nakulginilytics or nakul123, and that's what gets saved for pushing code to GitHub.

# This could cause problems in Pull and Push Requests:
How to Fix It:
Open Windows Credential Manager:

Go to Control Panel → Credential Manager → Windows Credentials.
Find the entry for github.com (this is where your login details are saved).
Update or Delete the Wrong Username:

If you see nakulginilytics saved, you can either:
Edit it to change it to the correct username.
Delete it, and Git will ask you to log in with the correct username the next time you push.
After this, when you try to push your code to GitHub, it will ask you for the correct login credentials and use those.

# Diff bw merge and rebase
https://youtube.com/shorts/vluCkVfqEVI?feature=shared

In simple terms, both Git merge and Git rebase are ways to combine changes from different branches in Git, but they do it differently.

1. Git Merge (Like merging two paths into one)
What it does: It takes the changes from one branch and merges them into another branch, creating a new "merge commit" that ties the two histories together.

How it looks: The history will have a new point where the two branches came together, but both branch histories are still visible.
Example: Imagine two roads (branches) coming together at a junction. After the merge, both roads are still visible, but you can now walk down one road that connects them both.

Result: You keep the full history of both branches.
Pros:

Keeps a clear record of when the branches merged.
Good for collaboration since everyone can see the separate paths that were merged.
easy to solve conflicts
Cons:

The commit history can get messy with many branches being merged.

2. Git Rebase (Like rewriting history to one clean path)
What it does: It takes the changes from one branch and re-applies them on top of another branch, as if they were made there in the first place.
Example: Imagine two roads that are parallel (two branches). After rebase, it's like one road is lifted and laid down directly on top of the other, making it look like there was only one road the whole time.

Result: You get a cleaner, linear history.
Pros:

Creates a neat, straight history without merge commits.
Useful when you want to clean up the history before sharing it with others.
Cons:

You’re rewriting history, so it can be tricky or dangerous when collaborating with others (because you’re changing the original commit history).

difficult to resolve conlflicts

Summary:
Git Merge: Combines two branches, keeping the full history of both. The result has a new merge commit.
Git Rebase: Reapplies the changes from one branch onto another, creating a clean, linear history but rewriting history in the process.

# steps for PULL,COMMIT,PUSH.
suppose you have multiple branches

1. main
2. Dev
3. Nakul
4. Parv

# suppose Nakul want to push some changes,steps are:
1. stash changes first in case you wants to take pull from own branch then unstansh after pull.
2. after pull add changes in staging.
3. add relevent commit message and commit changes.
4. Push changes 

# Parv want to get changes from Nakul
  1. stash change if have any and then switch to branch you want to get changes from (in this case Nakul) take pull.
  2. After pull switch to Own branch and merge code with Nakul either by rebase or merge.
  3. After Merge apply stash and now your changes and Nakul changes are together in local repo.
  4. Commit and Push those changes in You branch i.e (Parv)
  

# How to add existing project from visual studio code to github
  Link: https://www.youtube.com/watch?v=JB7YD7OKm5g&ab_channel=TheCodeCity

  In case link does not work steps are:
  1. Make sure you are logged in with correct github account on your local system, Check credential manager
 ![alt text](image.png)

 2. First Create new Reporitory in Github 

 3. After that open project in VS code and in terminal run the comands
    # git init (Make sure you have git installed)
    # commit the changes 
    # git add remote origin link to repo +.git eg. (https://github.com/naku1998/Angular-Notes.git)
    check if project is added or not
    # git remote -v these should print 
    Make sure it prints:
    origin  https://github.com/naku1998/Angular-Notes.git (fetch)
    origin  https://github.com/naku1998/Angular-Notes.git (push)
    # Lastly push git push origin <branchname>
    #



    

